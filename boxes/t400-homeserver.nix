{ config, pkgs, lib, ... }: {
  # Use the GRUB 2 boot loader, because systemd doesn't support legacy BIOS
  boot.loader.grub.enable = true;
  boot.loader.grub.version = 2;
  boot.loader.grub.device = "/dev/sda";
  boot.loader.grub.efiSupport = false;
  boot.loader.grub.configurationLimit = 50;

  # It's a laptop
  services.logind.lidSwitch = "ignore";

  networking.interfaces.enp0s25.useDHCP = true;
  networking.interfaces.wlp3s0.useDHCP = true;
  networking.interfaces.wwp0s20u4i6.useDHCP = true;

  networking.hostName = "t400-homeserver";
  networking.hostId = "35c1d661";

  # See https://grahamc.com/blog/erase-your-darlings for rationale behind this setup

  # / is wiped on every boot to keep unmanaged state under control
  fileSystems."/" = {
    device = "rpool/expendable/wipedonboot";
    fsType = "zfs";
  };


  fileSystems."/nix" = {
    device = "rpool/expendable/nix";
    fsType = "zfs";
  };

  # This is where precious system state outside /home is stored
  fileSystems."/persist" = {
    device = "rpool/precious/systempersist";
    fsType = "zfs";
  };

  fileSystems."/home" = {
    device = "rpool/precious/home";
    fsType = "zfs";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/5503d76e-dccf-4b6d-abaa-d0817e8c01cb";
    fsType = "ext4";
  };

  # ZFS storage for various kinds of mass media
  fileSystems."/tank/torrents" = {
    device = "tank/torrents";
    fsType = "zfs";
  };


  # Remember connected networks and their creds
  # TODO: Replace w/ server solution
  environment.etc."NetworkManager/system-connections" = {
    source = "/persist/etc/NetworkManager/system-connections/";
  };

  # Remember NixOS configuration
  environment.etc."nixos" = { source = "/persist/etc/nixos/"; };

  # Remember user credentials
  environment.etc."passwd" = { source = "/persist/etc/passwd"; };
  environment.etc."passwd-" = { source = "/persist/etc/passwd-"; };
  environment.etc."shadow" = { source = "/persist/etc/shadow"; };
  environment.etc."shadow-" = { source = "/persist/etc/shadow-"; };

  # For services where state location can't be changed in the config, we use symlinks
  systemd.tmpfiles.rules = [
    # Remember LXD containers
    "L /var/lib/lxd - - - - /persist/var/lib/lxd"
    # Remember docker containers
    "L /var/lib/docker - - - - /persist/var/lib/docker"
    # Remember libvirt VMs
    "L /var/lib/libvirt - - - - /persist/var/lib/libvirt"
    # Remember root's home (needed to keep system channels)
    "L /root - - - - /persist/root"
    # Remember users who completed the sudo lecture so it doesn't repeat after every boot
    "L /var/db/sudo/lectured - - - - /persist/var/db/sudo/lectured"
  ];

  # Remember SSH host keys
  services.openssh = {
    hostKeys = [
      {
        path = "/persist/etc/ssh/ssh_host_ed25519_key";
        type = "ed25519";
      }
      {
        path = "/persist/etc/ssh/ssh_host_rsa_key";
        type = "rsa";
        bits = 4096;
      }
    ];
  };

  # Needed so that nixos-hardware enables CPU microcode updates
  hardware.enableRedistributableFirmware = true;

  # Add ZFS support
  boot.supportedFilesystems = [ "zfs" ];
  boot.zfs.requestEncryptionCredentials = true;
  # ZFS services
  services.zfs.autoSnapshot.enable = true;
  # ZFS scrubbing, but only on AC power
  services.zfs.autoScrub.enable = true;
  systemd.services.zfs-scrub.unitConfig.ConditionACPower = true;
  # ZFS trim, but also only on AC
  services.zfs.trim.enable = true;
  systemd.services.zpool-trim.unitConfig.ConditionACPower = true;

  # Allegedly, ZFS does not like the kernel scheduler messing with it
  # TODO: Research how to set this only for /dev/sda
  boot.kernelParams = [ "elevator=none" ];

  # Allow remote unlock of root via SSH
  boot = {
  initrd.postDeviceCommands = lib.mkAfter ''
    zfs rollback -r rpool/expendable/wipedonboot@blank
  '';
    initrd.network = {
     # This will use udhcp to get an ip address.
     # Make sure you have added the kernel module for your network driver to `boot.initrd.availableKernelModules`, 
     # so your initrd can load it!
     # Static ip addresses might be configured using the ip argument in kernel command line:
     # https://www.kernel.org/doc/Documentation/filesystems/nfs/nfsroot.txt
     enable = true;
     ssh = {
        enable = true;
        # To prevent ssh from freaking out because a different host key is used,
        # a different port for dropbear is useful (assuming the same host has also a normal sshd running)
        port = 2222;
        # dropbear uses key format different from openssh; can be generated by using:
        # $ nix-shell -p dropbear --command "dropbearkey -t ecdsa -f /persist/etc/initrd-ssh-key-ecdsa"
        hostECDSAKey = /persist/etc/initrd-ssh-key-ecdsa;
        # $ nix-shell -p dropbear --command "dropbearkey -t dss -f /persist/etc/initrd-ssh-key-dss"
        hostDSSKey = /persist/etc/initrd-ssh-key-dss;
        # $ nix-shell -p dropbear --command "dropbearkey -t rsa -s 4096 -f /persist/etc/initrd-ssh-key-rsa"
        hostRSAKey = /persist/etc/initrd-ssh-key-rsa;
        # public ssh key used for login
        authorizedKeys = [ "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDkDqwoQOFjp8LsOuCov9Mb0mlFZvkG1jj48cEdR5Tdozp9y92fdsf33C1cJAa5jtFVqYX8EydyFrMhjRRY7qd89QIAgB33IsOoGmM2XFxy9q7X0fAfojvkU9nil3GQfL1OexliuW1LOipXo3s1Ay7HNyruQvJqCfp/LNeTn4EwTOIg6vsCZLxw+T2Snrl1slGqp/mk0xSiq9t81qGKXouqLQECCmX4zAvp4wA8Fq7cHqtfOX26L1nRAsVRP93WOUXrkc0nL5vP9DF+uQaOtj0rA/F3qtgkh+zxvqS4iUC/d932dVayS2+UtR1HhAY/1L7E+9StxCDX5vgP+YJ0a4PzZDBaEhhznrna1cSsWh10ErlPdqMwgrk6+d7/V78Lk3z36vLkNMz+v6/T60vmHUp3/6w/ZonMmuyIESnhLt9e42AZQeElrVtiOedu1XbiBw9c9ztw+/NBKESFuAIcVQaeKo+MiE4f7m8/APWPHNboHqF6G1fMFsjtDNSGGx1nGCECCSMO/EJbxwpWGzn7a4DWq0wRZFYpwrZ6/w3Ex9VL6QiqbkKXVmNSTMkSXMBupzQBbxQX6Pxk4DCPC4ptgGApfIxTH6hUpnvsrzqBIiAiwekGdEJ9QVNifo73s9DeYmieBprpJPDi6SsIhf+/BcHQnQeEL7eNJBEKvc7FEYWr2Q== user@pop-os" ];
     };
     # this will automatically load the zfs password prompt on login
     # and kill the other prompt so boot can continue
     postCommands = ''
       echo "zfs load-key -a; killall zfs" >> /root/.profile
     '';
    };
  };
}
